{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useLogin = () => {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const login = async (email, password) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('/api/user/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to login'); // Throw an error if response is not ok\n      }\n\n      const json = await response.json(); // Check if the response body is empty\n\n      if (!json) {\n        throw new Error('Unexpected response format'); // Handle empty response\n      } // Assume you store the user token and other user data\n\n\n      localStorage.setItem('user', JSON.stringify(json));\n      setIsLoading(false);\n      return json; // Return the user data if needed\n    } catch (err) {\n      setIsLoading(false);\n      setError(err.message);\n      console.error(\"Login error:\", err);\n    }\n  };\n\n  return {\n    login,\n    error,\n    isLoading\n  };\n};\n\n_s(useLogin, \"TdgXzm3bV5WOR6TSvW/vB2ctGng=\");\n\nexport default useLogin;","map":{"version":3,"names":["useState","useLogin","error","setError","isLoading","setIsLoading","login","email","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","localStorage","setItem","err","message","console"],"sources":["C:/Users/alexm/VsCodeProjects/School Projects/CEN/SWE semester project/OnTask/frontend/src/hooks/useLogin.js"],"sourcesContent":["import { useState } from 'react';\r\n\r\nconst useLogin = () => {\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const login = async (email, password) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('/api/user/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to login'); // Throw an error if response is not ok\r\n      }\r\n\r\n      const json = await response.json();\r\n\r\n      // Check if the response body is empty\r\n      if (!json) {\r\n        throw new Error('Unexpected response format'); // Handle empty response\r\n      }\r\n\r\n      // Assume you store the user token and other user data\r\n      localStorage.setItem('user', JSON.stringify(json));\r\n      setIsLoading(false);\r\n      return json; // Return the user data if needed\r\n    } catch (err) {\r\n      setIsLoading(false);\r\n      setError(err.message);\r\n      console.error(\"Login error:\", err);\r\n    }\r\n  };\r\n\r\n  return { login, error, isLoading };\r\n};\r\n\r\nexport default useLogin;\r\n"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EACrB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,IAAD,CAAlC;EACA,MAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;;EAEA,MAAMM,KAAK,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;IACvCH,YAAY,CAAC,IAAD,CAAZ;IACAF,QAAQ,CAAC,IAAD,CAAR;;IAEA,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAD,EAAoB;QAC9CC,MAAM,EAAE,MADsC;QAE9CC,OAAO,EAAE;UACP,gBAAgB;QADT,CAFqC;QAK9CC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UAAER,KAAF;UAASC;QAAT,CAAf;MALwC,CAApB,CAA5B;;MAQA,IAAI,CAACC,QAAQ,CAACO,EAAd,EAAkB;QAChB,MAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN,CADgB,CACoB;MACrC;;MAED,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACS,IAAT,EAAnB,CAbE,CAeF;;MACA,IAAI,CAACA,IAAL,EAAW;QACT,MAAM,IAAID,KAAJ,CAAU,4BAAV,CAAN,CADS,CACsC;MAChD,CAlBC,CAoBF;;;MACAE,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BN,IAAI,CAACC,SAAL,CAAeG,IAAf,CAA7B;MACAb,YAAY,CAAC,KAAD,CAAZ;MACA,OAAOa,IAAP,CAvBE,CAuBW;IACd,CAxBD,CAwBE,OAAOG,GAAP,EAAY;MACZhB,YAAY,CAAC,KAAD,CAAZ;MACAF,QAAQ,CAACkB,GAAG,CAACC,OAAL,CAAR;MACAC,OAAO,CAACrB,KAAR,CAAc,cAAd,EAA8BmB,GAA9B;IACD;EACF,CAjCD;;EAmCA,OAAO;IAAEf,KAAF;IAASJ,KAAT;IAAgBE;EAAhB,CAAP;AACD,CAxCD;;GAAMH,Q;;AA0CN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}