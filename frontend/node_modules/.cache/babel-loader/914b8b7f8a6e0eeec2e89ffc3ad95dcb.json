{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alexm\\\\VsCodeProjects\\\\School Projects\\\\CEN\\\\SWE semester project\\\\SWE-OnTask\\\\frontend\\\\src\\\\pages\\\\Account.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useAuthContext } from \"../hooks/useAuthContext\";\nimport { useClassContext } from \"../hooks/useClassContext\"; // Use the class context to get classroom data\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Account = () => {\n  _s();\n\n  var _classroomData$email, _classroomData$classr, _classroomData$code;\n\n  const {\n    user\n  } = useAuthContext();\n  const {\n    classroom,\n    dispatch\n  } = useClassContext(); // Get classroom from context\n\n  const [loading, setLoading] = useState(true);\n  const [classroomData, setClassroomData] = useState(null); // State to store classroom info\n  // Fetch classroom data based on user email\n\n  useEffect(() => {\n    if (user && user.email) {\n      const fetchClassroom = async () => {\n        try {\n          // Replace with your API call\n          const response = await fetch(`/api/classrooms?email=${user.email}`);\n          const data = await response.json();\n\n          if (response.ok) {\n            setClassroomData(data); // Store the fetched classroom data\n\n            dispatch({\n              type: 'CREATE_CLASS',\n              payload: data\n            }); // Update context\n          } else {\n            console.log('No classroom found for this email');\n          }\n        } catch (error) {\n          console.error(\"Error fetching classroom:\", error);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      fetchClassroom();\n    }\n  }, [user, dispatch]); // Run effect when user or dispatch changes\n  // Add a fallback in case user or classroom is null\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 16\n    }, this); // Or a better fallback message\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"account\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Account Info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Account Type: \", user.role]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Name: \", user.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Email: \", user.email]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), user.role === \"student\" && classroomData && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Teacher's Email: \", (_classroomData$email = classroomData.email) !== null && _classroomData$email !== void 0 ? _classroomData$email : \"email not provided\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Class Name: \", (_classroomData$classr = classroomData.classroomName) !== null && _classroomData$classr !== void 0 ? _classroomData$classr : \"Classroom not created yet\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Class Code: \", (_classroomData$code = classroomData.code) !== null && _classroomData$code !== void 0 ? _classroomData$code : \"Class Code not created yet\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), !classroomData && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No classroom associated with this email.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Account, \"W0Thu9DyH8FjFRMYNAqyo+8zpbw=\", false, function () {\n  return [useAuthContext, useClassContext];\n});\n\n_c = Account;\nexport default Account;\n\nvar _c;\n\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"names":["React","useEffect","useState","useAuthContext","useClassContext","Account","user","classroom","dispatch","loading","setLoading","classroomData","setClassroomData","email","fetchClassroom","response","fetch","data","json","ok","type","payload","console","log","error","role","name","classroomName","code"],"sources":["C:/Users/alexm/VsCodeProjects/School Projects/CEN/SWE semester project/SWE-OnTask/frontend/src/pages/Account.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useAuthContext } from \"../hooks/useAuthContext\";\r\nimport { useClassContext } from \"../hooks/useClassContext\"; // Use the class context to get classroom data\r\n\r\nconst Account = () => {\r\n    const { user } = useAuthContext();\r\n    const { classroom, dispatch } = useClassContext(); // Get classroom from context\r\n    const [loading, setLoading] = useState(true);\r\n    const [classroomData, setClassroomData] = useState(null); // State to store classroom info\r\n\r\n    // Fetch classroom data based on user email\r\n    useEffect(() => {\r\n        if (user && user.email) {\r\n            const fetchClassroom = async () => {\r\n                try {\r\n                    // Replace with your API call\r\n                    const response = await fetch(`/api/classrooms?email=${user.email}`);\r\n                    const data = await response.json();\r\n                    if (response.ok) {\r\n                        setClassroomData(data); // Store the fetched classroom data\r\n                        dispatch({ type: 'CREATE_CLASS', payload: data }); // Update context\r\n                    } else {\r\n                        console.log('No classroom found for this email');\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Error fetching classroom:\", error);\r\n                } finally {\r\n                    setLoading(false);\r\n                }\r\n            };\r\n\r\n            fetchClassroom();\r\n        }\r\n    }, [user, dispatch]); // Run effect when user or dispatch changes\r\n\r\n    // Add a fallback in case user or classroom is null\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (!user) {\r\n        return <div>Loading...</div>; // Or a better fallback message\r\n    }\r\n\r\n    return (\r\n        <div className=\"account\">\r\n            <h1>Account Info</h1>\r\n            <p>Account Type: {user.role}</p>\r\n            <p>Name: {user.name}</p>\r\n            <p>Email: {user.email}</p>\r\n            {user.role === \"student\" && classroomData && (\r\n                <>\r\n                    <p>Teacher's Email: {classroomData.email ?? \"email not provided\"}</p>\r\n                    <p>Class Name: {classroomData.classroomName ?? \"Classroom not created yet\"}</p>\r\n                    <p>Class Code: {classroomData.code ?? \"Class Code not created yet\"}</p>\r\n                </>\r\n            )}\r\n            {!classroomData && (\r\n                <p>No classroom associated with this email.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Account;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,eAAT,QAAgC,0BAAhC,C,CAA4D;;;;;AAE5D,MAAMC,OAAO,GAAG,MAAM;EAAA;;EAAA;;EAClB,MAAM;IAAEC;EAAF,IAAWH,cAAc,EAA/B;EACA,MAAM;IAAEI,SAAF;IAAaC;EAAb,IAA0BJ,eAAe,EAA/C,CAFkB,CAEiC;;EACnD,MAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,IAAD,CAAlD,CAJkB,CAIwC;EAE1D;;EACAD,SAAS,CAAC,MAAM;IACZ,IAAIK,IAAI,IAAIA,IAAI,CAACO,KAAjB,EAAwB;MACpB,MAAMC,cAAc,GAAG,YAAY;QAC/B,IAAI;UACA;UACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,yBAAwBV,IAAI,CAACO,KAAM,EAArC,CAA5B;UACA,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;UACA,IAAIH,QAAQ,CAACI,EAAb,EAAiB;YACbP,gBAAgB,CAACK,IAAD,CAAhB,CADa,CACW;;YACxBT,QAAQ,CAAC;cAAEY,IAAI,EAAE,cAAR;cAAwBC,OAAO,EAAEJ;YAAjC,CAAD,CAAR,CAFa,CAEsC;UACtD,CAHD,MAGO;YACHK,OAAO,CAACC,GAAR,CAAY,mCAAZ;UACH;QACJ,CAVD,CAUE,OAAOC,KAAP,EAAc;UACZF,OAAO,CAACE,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;QACH,CAZD,SAYU;UACNd,UAAU,CAAC,KAAD,CAAV;QACH;MACJ,CAhBD;;MAkBAI,cAAc;IACjB;EACJ,CAtBQ,EAsBN,CAACR,IAAD,EAAOE,QAAP,CAtBM,CAAT,CAPkB,CA6BI;EAEtB;;EACA,IAAIC,OAAJ,EAAa;IACT,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACH;;EAED,IAAI,CAACH,IAAL,EAAW;IACP,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP,CADO,CACuB;EACjC;;EAED,oBACI;IAAK,SAAS,EAAC,SAAf;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAA,6BAAkBA,IAAI,CAACmB,IAAvB;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI;MAAA,qBAAUnB,IAAI,CAACoB,IAAf;IAAA;MAAA;MAAA;MAAA;IAAA,QAHJ,eAII;MAAA,sBAAWpB,IAAI,CAACO,KAAhB;IAAA;MAAA;MAAA;MAAA;IAAA,QAJJ,EAKKP,IAAI,CAACmB,IAAL,KAAc,SAAd,IAA2Bd,aAA3B,iBACG;MAAA,wBACI;QAAA,wDAAqBA,aAAa,CAACE,KAAnC,uEAA4C,oBAA5C;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAA,oDAAgBF,aAAa,CAACgB,aAA9B,yEAA+C,2BAA/C;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI;QAAA,kDAAgBhB,aAAa,CAACiB,IAA9B,qEAAsC,4BAAtC;MAAA;QAAA;QAAA;QAAA;MAAA,QAHJ;IAAA,gBANR,EAYK,CAACjB,aAAD,iBACG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAbR;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAkBH,CA1DD;;GAAMN,O;UACeF,c,EACeC,e;;;KAF9BC,O;AA4DN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}